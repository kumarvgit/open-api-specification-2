---
openapi: 3.0.2
info:
  title: Open API3
  description: OpenAPI course
  termsOfService: http://example.tos.com/tos
  contact:
    name: Kumar Vaibhav
    url: http://myweb.com
    email: vaibhav.cs.kumar@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
- url: https://dev.example.com
  description: Dev server
- url: https://qa.example.com
  description: QA server
- url: https://prod.example.com
  description: Prod Server
security:
- HttpBasic: []
- JWTAuthToken: []
paths:
  /v1/customers:
    get:
      tags:
      - Customers
      summary: List all customer
      description: Get all customer in system
      operationId: getAllCustomersV1
      parameters:
      - name: pageNumber
        in: query
        description: Page number to be fetched
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        description: Number of records to be fetched
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          type: integer
          format: int32
          default: 25
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPagedList'
      security: []
    post:
      tags:
      - Customers
      summary: Create a new customer
      description: Add anew customer to the system
      operationId: postCustomerV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          description: Customer created
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                description: the location of created resource in Location header
                format: uri
                example: http://example.com/v1/customers/{assignedId}
        "400":
          description: Bad request
        "409":
          description: Conflit in creation
  /v1/customers/{customerId}:
    get:
      tags:
      - Customers
      summary: Get single customerdetails
      description: Get complete  description of a **customer**
      operationId: getCustomerByIdV1
      parameters:
      - name: customerId
        in: path
        description: Id of customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value and it is hard to gess the next one
          format: uuid
      responses:
        "200":
          description: response when customer data is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
      security: []
    put:
      tags:
      - Customers
      summary: Update customer
      description: update customer by id
      operationId: updateCustomerByIdV1
      parameters:
      - name: customerId
        in: path
        description: Id of customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value and it is hard to gess the next one
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "204":
          description: Customer updated
        "400":
          description: Bad request
        "404":
          description: Customer not found
        "409":
          description: Conflict
    delete:
      tags:
      - Customers
      summary: Delete a customer by id
      description: Delete a customer by its id
      operationId: deleteCustomerByIdV1
      parameters:
      - name: customerId
        in: path
        description: Id of customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value and it is hard to gess the next one
          format: uuid
      responses:
        "200":
          description: Customer deleted successfully
        "404":
          description: Customer not found
  /v1/customers/{customerId}/orders:
    post:
      tags:
      - Order Service
      description: Place Order
      parameters:
      - name: customerId
        in: path
        description: Id of customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value and it is hard to gess the next one
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerOrder'
        required: false
      responses:
        "201":
          description: Order Created
          headers:
            Location:
              description: Reference to created Order
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Bad Reqeust
        "404":
          description: Not Found
        "409":
          description: Conflict
      callbacks:
        orderStatusChange:
          ${request.body#/orderStatusCallbackUrl}:
            description: Webhook for order status change notifications
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                "200":
                  description: Okay
  /v1/beers:
    get:
      tags:
      - Beers
      summary: Get all beers in system
      description: Find all beers in system
      operationId: getAllBeersV1
      parameters:
      - name: pageNumber
        in: query
        description: Page number to be fetched
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        description: Number of records to be fetched
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          type: integer
          format: int32
          default: 25
      responses:
        "200":
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeerPagedList'
        "404":
          description: Beers not found
    post:
      tags:
      - Beers
      summary: created a new beer
      description: creats a new beer
      operationId: postBeersV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "201":
          description: Beer created
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                description: location of the created resource
                example: http://example.com/v1/beers/{idOfCreatedResouce}
        "400":
          description: Bad request
        "409":
          description: Conflit in creation
  /v1/beers/{beerId}:
    get:
      tags:
      - Beers
      summary: Get details of specified beer
      description: Get details of single **beer**
      operationId: getBeerByIdV1
      parameters:
      - name: beerId
        in: path
        description: beer id to be found
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value
          format: uuid
      responses:
        "200":
          description: found beer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        "404":
          description: Beer not found
    put:
      tags:
      - Beers
      summary: Update beer
      description: Update beer
      operationId: updateBeerByIdV1
      parameters:
      - name: beerId
        in: path
        description: beer id to be found
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        "204":
          description: Beer updated
        "400":
          description: Bad request
        "404":
          description: Beer not found
        "409":
          description: Conflicting operation
    delete:
      tags:
      - Beers
      summary: Delete a beer by its id
      description: Delete beer by id
      operationId: deleteBeerByIdV1
      parameters:
      - name: beerId
        in: path
        description: beer id to be found
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: uuid is a system generated value
          format: uuid
      responses:
        "200":
          description: Beer deleted successfully
        "404":
          description: Beers not found
components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: "123"
        city:
          type: string
          example: BLR
        stateCode:
          maxLength: 2
          minLength: 2
          type: string
          description: 2 letter state code
          enum:
          - AL
          - AK
          - AZ
          - AR
          - CA
        zipcode:
          type: string
          example: "560043"
      description: address object
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          maxLength: 100
          minLength: 2
          type: string
          example: Kumar
        lastName:
          maxLength: 100
          minLength: 2
          type: string
          example: Vaibhav
        address:
          $ref: '#/components/schemas/Address'
      description: customer object
    CustomerList:
      maxItems: 100
      minItems: 1
      type: array
      description: List of customers
      items:
        $ref: '#/components/schemas/Customer'
    Brewery:
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: Name of the brewery
          example: Titos
        location:
          maxLength: 100
          minLength: 2
          type: string
          description: The city of the brewery
          example: BLR
      description: Brewery producing this
    Beer:
      type: object
      properties:
        id:
          type: string
          description: id of the resource
          format: uuid
          readOnly: true
        beerName:
          maxLength: 100
          minLength: 2
          type: string
          description: name of the beer
          example: Carlsberg
        style:
          maxLength: 20
          minLength: 2
          type: string
          description: style of the beer
          enum:
          - ALE
          - PALE_ALE
          - IPA
          - WHEAT
          - LAGER
        price:
          minimum: 0.1
          type: number
          description: price of the beer
          format: float
          example: 10.99
        quantityOnHand:
          maximum: 500
          minimum: 1
          type: integer
          description: Quantity to be held
          format: int32
          example: 250
        brewery:
          $ref: '#/components/schemas/Brewery'
      description: beer object
    BeerList:
      type: array
      items:
        $ref: '#/components/schemas/Beer'
    BeerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/BeerList'
      allOf:
      - $ref: '#/components/schemas/PagedResponse'
    CustomerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'
      allOf:
      - $ref: '#/components/schemas/PagedResponse'
    BeerOrder:
      required:
      - customerId
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        customerId:
          type: string
          format: uuid
        customerRef:
          type: string
          nullable: true
        beerOrderLines:
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        orderStatusCallbackUrl:
          type: string
          format: uri
    BeerOrderLine:
      required:
      - orderQuantity
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type: integer
          nullable: true
          readOnly: true
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page number to be fetched
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 0
    PageSizeParam:
      name: pageSize
      in: query
      description: Number of records to be fetched
      required: false
      style: form
      explode: true
      schema:
        maximum: 100
        type: integer
        format: int32
        default: 25
    CustomerIdPathParams:
      name: customerId
      in: path
      description: Id of customer
      required: true
      style: simple
      explode: false
      schema:
        type: string
        description: uuid is a system generated value and it is hard to gess the next one
        format: uuid
    BeerIdPathParam:
      name: beerId
      in: path
      description: beer id to be found
      required: true
      style: simple
      explode: false
      schema:
        type: string
        description: uuid is a system generated value
        format: uuid
  securitySchemes:
    HttpBasic:
      type: http
      description: Bring in basic auth in scope
      scheme: basic
    JWTAuthToken:
      type: http
      description: JWT mechanism for authorization
      scheme: bearer
      bearerFormat: JWT
