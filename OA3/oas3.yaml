openapi: 3.0.2 # required
info: # requried
  version: '1.0'
  title: Open API3
  description: OpenAPI course
  termsOfService: http://example.tos.com/tos
  contact:
    name: Kumar Vaibhav
    url: http://myweb.com
    email: vaibhav.cs.kumar@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://dev.example.com
    description: Dev server
  - url: https://qa.example.com
    description: QA server
  - url: https://prod.example.com
    description: Prod Server
paths:
  /v1/customers:
    get:
      tags: 
        - Customers # Grouping together
      operationId: getAllCustomersV1 # this is used by code gens
      summary: List all customer
      description: Get all customer in system
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
          
      responses: # list of responses
        '200':
          description: List of customers
          content:
            application/json:
              schema: #reponse type this can be another object
                $ref: "#/components/schemas/CustomerPagedList"
      security: [] # overriding the global security applied to be open and without authentication
    post:
      tags: 
        - Customers
      summary: Create a new customer
      description: Add anew customer to the system
      operationId: postCustomerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: "Customer created"
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: the location of created resource in Location header
                example: http://example.com/v1/customers/{assignedId}
        '400':
          description: Bad request
        '409': # this is returned when there is a conflict
          description: Conflit in creation 
  /v1/customers/{customerId}:
    get:
      tags: 
        - Customers # Grouping together
      operationId: getCustomerByIdV1 # this is used by code gens
      summary: Get single customerdetails
      description: Get complete  description of a **customer**
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParams'
      responses:
        '200':
          description: response when customer data is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
      security: [] # overriding the global security applied to be open and without authentication
    put:
      summary: Update customer
      description: update customer by id
      operationId: updateCustomerByIdV1
      tags: 
        - Customers
      parameters: 
        - $ref: '#/components/parameters/CustomerIdPathParams'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '204':
          description: Customer updated
        '400':
          description: Bad request
        '404':
          description: Customer not found
        '409':
          description: Conflict
    delete:
      summary: Delete a customer by id
      description: Delete a customer by its id
      operationId: deleteCustomerByIdV1
      tags: 
        - Customers
      parameters: 
        - $ref: '#/components/parameters/CustomerIdPathParams'
      responses:
        '200':
          description: Customer deleted successfully
        '404':
          description: Customer not found
  /v1/customers/{customerId}/orders:
    post:
      tags:
      - Order Service
      description: Place Order
      parameters:
      - $ref: '#/components/parameters/CustomerIdPathParams'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerOrder'
        required: false
      responses:
        201:
          description: Order Created
          headers:
            Location:
              description: Reference to created Order
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        400:
          description: Bad Reqeust
        404:
          description: Not Found
        409:
          description: Conflict
      callbacks: # CAllback functionality, https://swagger.io/docs/specification/callbacks/
        orderStatusChange:
          ${request.body#/orderStatusCallbackUrl}:
            description: Webhook for order status change notifications
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                200:
                  description: Okay
            
  /v1/beers:
    get:
      tags: 
        - Beers # Grouping together
      operationId: getAllBeersV1 # this is used by code gens
      summary: Get all beers in system
      description: Find all beers in system
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
                      
        '404':
          description: Beers not found
    post:
      tags: 
        - Beers
      description: creats a new beer
      operationId: postBeersV1
      summary: created a new beer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        '201':
          description: Beer created
          headers:
            Location:
              schema:
                type: string
                description: location of the created resource
                example: http://example.com/v1/beers/{idOfCreatedResouce}
        '400':
          description: Bad request
        '409': # this is returned when there is a conflict
          description: Conflit in creation 
  /v1/beers/{beerId}:
    get:
      tags: 
        - Beers
      operationId: getBeerByIdV1 # this is used by code gens
      summary: Get details of specified beer
      description: Get details of single **beer**
      parameters: 
        - $ref: '#/components/parameters/BeerIdPathParam'
      responses:
        '200':
          description: found beer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        '404':
          description: Beer not found
    put:
      parameters:
        - $ref: '#/components/parameters/BeerIdPathParam'
      description: Update beer
      summary: Update beer
      operationId: updateBeerByIdV1
      tags: 
        - Beers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        '204':
          description: Beer updated
        '400':
          description: Bad request
        '404':
          description: Beer not found
        '409':
          description: Conflicting operation
    delete:
      tags: 
        - Beers
      parameters: 
        - $ref: '#/components/parameters/BeerIdPathParam'
      description: Delete beer by id
      summary: Delete a beer by its id
      operationId: deleteBeerByIdV1
      responses:
        '200':
          description: Beer deleted successfully
        '404':
          description: Beers not found

# Bring security at the specification level, here we can apply this at each http verb level as well
security: 
  - HttpBasic: []
  - JWTAuthToken: []
components:
  securitySchemes:
  # Bring in basic Auth in scope Begin
    HttpBasic:
      type: http
      scheme: basic
      description: Bring in basic auth in scope
  # Bring in basic Auth in scope End
  # Bring in JWT token BEGIN
    JWTAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT mechanish for authorization
  # Bring in JWT token BEGIN
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      required: false
      description: Page number to be fetched
      schema:
        type: integer
        format: int32
        default: 0
    PageSizeParam:
      name: pageSize
      in: query
      required: false
      description: Number of records to be fetched
      schema:
        type: integer
        format: int32
        default: 25
        maximum: 100
    CustomerIdPathParams:
      name: customerId # this should match as it is in path else it won't match up
      in: path
      required: true
      description: Id of customer
      schema:
        type: string
        format: uuid
        description: uuid is a system generated value and it is hard to gess the next one
    BeerIdPathParam:
      name: beerId
      description: beer id to be found
      in: path # indicates path param
      required: true # requied true is mandatory for required
      schema:
        type: string
        format: uuid
        description: uuid is a system generated value
  schemas:
    Address:
      type: object
      description: address object
      properties:
        line1:
          type: string
          example: 123
        city:
          type: string
          example: BLR
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state code
          # enum: [AL, AK, AZ, AR, CA] one way handle enum
          enum: 
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipcode:
          type: string
          example: 560043
    Customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true # readonly is a property which says it should not be supplied by the requester but may or may not be set by the server it is opposite of writeOnly
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Kumar # this is example value
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Vaibhav #this is example value
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of customers
      items:
        $ref: "#/components/schemas/Customer"
    Brewery:
      type: object
      description: Brewery producing this
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the brewery
          example: Titos
        location:
          type: string
          minLength: 2
          maxLength: 100
          description: The city of the brewery
          example: BLR
    Beer:
      type: object
      description: beer object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true # readonly is a property which says it should not be supplied by the requester but may or may not be set by the server it is opposite of writeOnly
          description: id of the resource
        beerName:
          type: string
          minLength: 2
          maxLength: 100
          description: name of the beer
          example: Carlsberg
        style:
          type: string
          minLength: 2
          maxLength: 20
          enum: 
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
          description: style of the beer
        price:
          type: number
          format: float # define the subtype
          minimum: 0.1
          description: price of the beer
          example: 10.99
        quantityOnHand:
          type: integer
          format: int32 # define the subtype
          minimum: 1
          maximum: 500
          description: Quantity to be held
          example: 250
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf: # demonstrating inheritence
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
    CustomerPagedList:
      type: object
      allOf: # demonstrating inheritence
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
    BeerOrder:
      required:
      - customerId
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        customerId:
          type: string
          format: uuid
        customerRef:
          type: string
          nullable: true
        beerOrderLines:
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        orderStatusCallbackUrl:
          type: string
          format: uri
    BeerOrderLine:
      required:
      - orderQuantity
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type: integer
          nullable: true
          readOnly: true
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
