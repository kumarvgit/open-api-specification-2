openapi: 3.0.2 # required
info: # requried
  version: '1.0'
  title: Open API3
  description: OpenAPI course
  termsOfService: http://example.tos.com/tos
  contact:
    name: Kumar Vaibhav
    url: http://myweb.com
    email: vaibhav.cs.kumar@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://dev.example.com
    description: Dev server
  - url: https://qa.example.com
    description: QA server
  - url: https://prod.example.com
    description: Prod Server
paths:
  /v1/customers:
    get:
      responses: # list of responses
        '200':
          description: List of customers
          content:
            application/json:
              schema: #reponse type this can be another object
                $ref: "#/components/schemas/CustomerPagedList"
  /v1/beers:
    get:
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
                      
        '404':
          description: Beers not found
components:
  schemas:
    Address:
      type: object
      description: address object
      properties:
        line1:
          type: string
          example: 123
        city:
          type: string
          example: BLR
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state code
          # enum: [AL, AK, AZ, AR, CA] one way handle enum
          enum: 
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipcode:
          type: string
          example: 560043
    Customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Kumar # this is example value
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Vaibhav #this is example value
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of customers
      items:
        $ref: "#/components/schemas/Customer"
    Brewery:
      type: object
      description: Brewery producing this
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the brewery
          example: Titos
        location:
          type: string
          minLength: 2
          maxLength: 100
          description: The city of the brewery
          example: BLR
    Beer:
      type: object
      description: beer object
      properties:
        beerName:
          type: string
          minLength: 2
          maxLength: 100
          description: name of the beer
          example: Carlsberg
        style:
          type: string
          minLength: 2
          maxLength: 20
          enum: 
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
          description: style of the beer
        price:
          type: number
          format: float # define the subtype
          minimum: 0.1
          description: price of the beer
          example: 10.99
        quantityOnHand:
          type: integer
          format: int32 # define the subtype
          minimum: 1
          maximum: 500
          description: Quantity to be held
          example: 250
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf: # demonstrating inheritence
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
    CustomerPagedList:
      type: object
      allOf: # demonstrating inheritence
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
